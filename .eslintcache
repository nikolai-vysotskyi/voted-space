[{"/Users/tellor/PhpstormProjects/voted-space/src/index.js":"1","/Users/tellor/PhpstormProjects/voted-space/src/components/Header.js":"2","/Users/tellor/PhpstormProjects/voted-space/src/components/Logo.js":"3","/Users/tellor/PhpstormProjects/voted-space/src/routes/home.js":"4","/Users/tellor/PhpstormProjects/voted-space/src/consts/route.js":"5","/Users/tellor/PhpstormProjects/voted-space/src/components/Store/Store.jsx":"6","/Users/tellor/PhpstormProjects/voted-space/src/components/Store/structure.js":"7","/Users/tellor/PhpstormProjects/voted-space/src/components/Slider.js":"8","/Users/tellor/PhpstormProjects/voted-space/src/components/Store/slider.js":"9","/Users/tellor/PhpstormProjects/voted-space/src/components/ArrowRight.js":"10","/Users/tellor/PhpstormProjects/voted-space/src/components/ArrowLeft.js":"11"},{"size":1318,"mtime":1606992165696,"results":"12","hashOfConfig":"13"},{"size":825,"mtime":1607001702944,"results":"14","hashOfConfig":"13"},{"size":7775,"mtime":1607183034777,"results":"15","hashOfConfig":"13"},{"size":243,"mtime":1606993419973,"results":"16","hashOfConfig":"13"},{"size":106,"mtime":1606987437669,"results":"17","hashOfConfig":"13"},{"size":949,"mtime":1607259330479,"results":"18","hashOfConfig":"13"},{"size":61,"mtime":1606997687832,"results":"19","hashOfConfig":"13"},{"size":6251,"mtime":1607184888537,"results":"20","hashOfConfig":"13"},{"size":2275,"mtime":1607170654961,"results":"21","hashOfConfig":"13"},{"size":941,"mtime":1607183067633,"results":"22","hashOfConfig":"13"},{"size":866,"mtime":1607183058033,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"28qor0",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"/Users/tellor/PhpstormProjects/voted-space/src/index.js",[],["50","51"],"/Users/tellor/PhpstormProjects/voted-space/src/components/Header.js",[],"/Users/tellor/PhpstormProjects/voted-space/src/components/Logo.js",[],"/Users/tellor/PhpstormProjects/voted-space/src/routes/home.js",["52"],"import React from \"react\";\nimport Slider from './../components/Slider'\n\nconst Home = ({}) => {\n    return (\n        <div>\n            <div className='home_bg'></div>\n            <Slider></Slider>\n        </div>\n    );\n};\n\nexport default Home;\n","/Users/tellor/PhpstormProjects/voted-space/src/consts/route.js",[],"/Users/tellor/PhpstormProjects/voted-space/src/components/Store/Store.jsx",["53"],"/Users/tellor/PhpstormProjects/voted-space/src/components/Store/structure.js",["54"],"import slider from './slider';\n\nexport default [\n\tslider,\n];\n","/Users/tellor/PhpstormProjects/voted-space/src/components/Slider.js",["55"],"import React, {useState} from \"react\";\nimport {useSelector} from 'react-redux';\nimport ArrowLeft from \"./ArrowLeft\";\nimport ArrowRight from \"./ArrowRight\";\n\nimport {\n    NavLink,\n} from \"react-router-dom\";\n\nlet Slider = () => {\n        const Slider = useSelector((state) => state.slider);\n        // let currentSlide = Slider.currentSlide;\n        let slides = Slider.slides;\n\n        const [currentSlide, setCount] = useState(Slider.currentSlide);\n\n        function counter(type) {\n            switch (type) {\n                case 'increment':\n                    return currentSlide < 4 ? setCount(currentSlide + 1) : setCount(0);\n                case 'decrement':\n                    return currentSlide > 0 ? setCount(currentSlide - 1) : setCount(4);\n                case 0: {\n                    return currentSlide + 2 <= 4 ? setCount(currentSlide + 2) : setCount((currentSlide + 2) - 5);\n                }\n                case 1:\n                    return currentSlide + 1 <= 4 ? setCount(currentSlide + 1) : setCount((currentSlide + 1) - 5);\n                case 2: {\n                    return setCount(currentSlide);\n                }\n                case 3:\n                    return currentSlide - 1 >= 0 ? setCount(currentSlide - 1) : setCount(5 + (currentSlide - 1));\n                case 4:\n                    return currentSlide - 2 >= 0 ? setCount(currentSlide - 2) : setCount(5 + (currentSlide - 2));\n                default:\n                    throw new Error();\n            }\n        }\n\n        function classType(type) {\n            let classType = 'slide_img ';\n            classType += 'slide_img-' + slideType(type);\n\n            return classType;\n        }\n\n        function slideType(type) {\n            let slType = 2;\n            if (type === 0) {\n                slType = currentSlide - 2 >= 0 ? (currentSlide - 2) : (5 + (currentSlide - 2));\n            } else if (type === 1) {\n                slType = currentSlide - 1 >= 0 ? (currentSlide - 1) : (5 + (currentSlide - 1));\n            } else if (type === 2)\n                slType = currentSlide ? currentSlide : currentSlide;\n            else if (type === 3) {\n                slType = currentSlide + 1 <= 4 ? (currentSlide + 1) : ((currentSlide + 1) - 5);\n            } else if (type === 4) {\n                slType = currentSlide + 2 <= 4 ? (currentSlide + 2) : ((currentSlide + 2) - 5);\n            }\n            return slType;\n        }\n\n        return (\n            <section className='slider'>\n                <div className='slider_wrapper'>\n                    <div className='slider_slides'>\n                        <div className='slide_arrow slide_arrow-left' onClick={() => counter('decrement')}>\n                            <ArrowLeft></ArrowLeft>\n                        </div>\n                        <div className={classType(0)} onClick={() => counter(slideType(0))}>\n                            <img className='slide_img-center' src={slides[currentSlide] ? slides[currentSlide].image : ''}\n                                 alt=\"\"/>\n                            <div className='slide_img-сircle'>\n                                <div className='slide_img-dot'></div>\n                            </div>\n                        </div>\n                        <div className={classType(1)} onClick={() => counter(slideType(1))}>\n                            <img className='slide_img-center' src={slides[currentSlide] ? slides[currentSlide].image : ''}\n                                 alt=\"\"/>\n                            <div className='slide_img-сircle'>\n                                <div className='slide_img-dot'></div>\n                            </div>\n                        </div>\n                        <div className={classType(2)} onClick={() => counter(slideType(2))}>\n                            <img className='slide_img-center' src={slides[currentSlide] ? slides[currentSlide].image : ''}\n                                 alt=\"\"/>\n                            <div className='slide_img-сircle'>\n                                <div className='slide_img-dot'></div>\n                            </div>\n                        </div>\n                        <div className={classType(3)} onClick={() => counter(slideType(3))}>\n                            <img className='slide_img-center' src={slides[currentSlide] ? slides[currentSlide].image : ''}\n                                 alt=\"\"/>\n                            <div className='slide_img-сircle'>\n                                <div className='slide_img-dot'></div>\n                            </div>\n                        </div>\n\n                        <div className={classType(4)} onClick={() => counter(slideType(4))}>\n                            <img className='slide_img-center' src={slides[currentSlide] ? slides[currentSlide].image : ''}\n                                 alt=\"\"/>\n                            <div className='slide_img-сircle'>\n                                <div className='slide_img-dot'></div>\n                            </div>\n                        </div>\n                        <div className='slide_arrow slide_arrow-right' onClick={() => counter('increment')}>\n                            <ArrowRight></ArrowRight>\n                        </div>\n                    </div>\n                    <div>\n                        <div className='slide_min-arrows'>\n                            <div className='slide_arrow slide_min-arrow'  onClick={() => counter('decrement')}>\n                                <ArrowLeft/>\n                            </div>\n                            <div className='h1 slide_header'>{slides[currentSlide] ? slides[currentSlide].title : ''}</div>\n                            <div className='slide_arrow slide_min-arrow'  onClick={() => counter('increment')}>\n                                <ArrowRight/>\n                            </div>\n                        </div>\n                        <div className='text slide_text'>{slides[currentSlide] ? slides[currentSlide].text : ''}</div>\n                        <button>Проголосовать</button>\n                    </div>\n                </div>\n            </section>\n        );\n    }\n;\n// Slider = React.memo(Slider);\n\nexport default Slider;\n","/Users/tellor/PhpstormProjects/voted-space/src/components/Store/slider.js",[],"/Users/tellor/PhpstormProjects/voted-space/src/components/ArrowRight.js",[],"/Users/tellor/PhpstormProjects/voted-space/src/components/ArrowLeft.js",[],{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","severity":1,"message":"61","line":4,"column":15,"nodeType":"62","messageId":"63","endLine":4,"endColumn":17},{"ruleId":"64","severity":1,"message":"65","line":29,"column":1,"nodeType":"66","endLine":29,"endColumn":29},{"ruleId":"64","severity":1,"message":"67","line":3,"column":1,"nodeType":"66","endLine":5,"endColumn":3},{"ruleId":"68","severity":1,"message":"69","line":7,"column":5,"nodeType":"70","messageId":"71","endLine":7,"endColumn":12},"no-native-reassign",["72"],"no-negated-in-lhs",["73"],"no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","Assign array to a variable before exporting as module default","no-unused-vars","'NavLink' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]